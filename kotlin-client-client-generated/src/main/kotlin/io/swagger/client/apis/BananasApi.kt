/**
 * OpenAPIDefinition annotation is required only once in a project
 *  ### markdown is supported</br> ---
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApiError
import io.swagger.client.models.Banana
import io.swagger.client.models.CreateBanana

import io.swagger.client.infrastructure.*

class BananasApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * create a banana
     * 
     * @param body  (optional)
     * @return void
     */
    fun createBanana(body: CreateBanana? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/bananas"
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * get a banana
     * ### markdown is supported&lt;/br&gt;
     * @param id  
     * @return Banana
     */
    @Suppress("UNCHECKED_CAST")
    fun getBanana(id: kotlin.String): Banana {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/bananas/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Banana>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Banana
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
